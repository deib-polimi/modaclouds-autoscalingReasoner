param folder symbolic;

for {j in 1..1}{
	for {k in K}{
		for {w in 1..Tw}{
		    #Assegnamento noise:
            let {t in 1..Tw} ns[t]:=0;
            
			#Assegnemento ai parametri locali dei valoti globali.
			let lpred[k,w]:=Lambda[k,j+w-1] * (1 + ns[w]);
			let r_bar[k,w]:=Nres[k,j+w];
			let d_bar[k,w]:=Nond[k,j+w];
		}
		let pred[k,j]:=lpred[k,1];
		let iter[k]:=iter[k] + 1;
	}
	#Ottimizzazione del problema.
	solve Global;
	if match (solve_message, "infeasible") > 0 
    then {
        printf "\n##############################\n";
        printf "### INFEASIBLE! check logs ###\n";
        printf "##############################\n";
        #break;
    }
	let tot:= tot + (delta*sum{k in K}d[k,1] + rho*sum{k in K}r[k,1]);
	printf "%%4.6f\n", cost > ('output/rawGlobal/cost.txt'); #debug
	display cost;
	for {k in K}{
		#Salvataggio del parametri locale in quello locale.
		let folder:= ('output/rawData/rawData'&k&'/');
	}
	for {k in K}{
		let folder:= ('output/rawData/rawData'&k&'/');
		#Aggiornamento dei parametri globali.
		let Mres[k,j]:= r[k,1];
		let Mond[k,j]:= d[k,1];
		for {t in 1..nTon}{
			let Nres[k,j+t]:=Nres[k,j+t] + Mres[k,j];
			let Nond[k,j+t]:=Nond[k,j+t] + Mond[k,j];
		}
	}
	
	#Debug: stampa su file dei valori delle espressioni relative allo sla ed ai vincoli del modello
    
    display {k in K, t in 1..Tw} (j, ((r_bar[k,t]+d_bar[k,t]+sum{tau in 1..t}(r[k,tau]+d[k,tau]))/(C*mu[k]*(r_bar[k,t]+d_bar[k,t]+sum{tau in 1..t}(r[k,tau]+d[k,tau]))-Lambda[k,j+t-1]))+D[k], Rcross[k] ) >('output/rawGlobal/sla.txt');
    display {k in K, t in 1..Tw} (j, sum{tau in 1..t} (r[k,tau]+d[k,tau]), ((Lambda[k,j+t-1]/(C*mu[k]))-(r_bar[k,t]+d_bar[k,t])-epsilon)) >('output/rawGlobal/equilibrio.txt');
    display {k in K, t in 1..Tw} (j, sum{tau in 1..t} (r[k,tau]+d[k,tau]), -(r_bar[k,t]+d_bar[k,t])-lpred[k,t]*(Rcross[k]-D[k])/(1-C*mu[k]*(Rcross[k]-D[k]))) >('output/rawGlobal/Rsoglia.txt');
    display {k in K, t in 1..Tw} (j, r_bar[k,t], d_bar[k,t], Nres[k,j], Nond[k,j], r[k,t], d[k,t], Mres[k,j], Mond[k,j], lpred[k,t], mu[k], Rcross[k]) >('output/rawGlobal/dati.txt');
    
    #Debug: rumore.
    display {t in 1..Tw} ns[t] >('output/rawGlobal/noise.txt');
}

